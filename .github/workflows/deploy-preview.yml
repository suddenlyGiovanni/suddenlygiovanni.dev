name: 🚀 Deploy Preview
permissions:
  contents: read
  packages: write
  actions: read
  deployments: write
  statuses: write
  pull-requests: write
  issues: write
on:
  pull_request:
    types: [ opened, reopened, synchronize, edited ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to deploy'
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-pr-${{ github.event.number || github.event.inputs.pr_number }}
  cancel-in-progress: true


jobs:
  deploy_preview:
    name: Build and Deploy Preview to Fly.io
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
      status: ${{ job.status }}
    environment:
      name: fly-preview-${{ github.event.number || github.event.inputs.pr_number }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Add deployment pending comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
           github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: '🔄 Preview deployment started... Please wait while we deploy your changes!'           
           })

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for flyctl release naming
          # If triggered manually, ensure we checkout the PR
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/pull/{0}/merge', github.event.inputs.pr_number) || '' }}

      - name: Prepare Repository Variables
        id: vars
        uses: ./.github/actions/prepare-repo-variables
        with:
          pr_number: ${{ github.event.inputs.pr_number || github.event.number }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🏗 ---------- Docker build & push (single step) ----------
      - name: 🐳 Build and Push Docker Image for Preview
        id: docker_build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/app/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.vars.outputs.IMAGE_TAG_PREVIEW }}
            ${{ steps.vars.outputs.IMAGE_TAG_PREVIEW_SHA }}
          #
          # ─── Cache strategy ──────────────────────────────────────────────
          # 1. Re-use layers from the previous build of this very PR
          # 2. Otherwise fall back to the latest build from main
          # 3. Finally fall back to the long-living generic cache (optional)
          #
          cache-from: |
            type=registry,ref=${{ steps.vars.outputs.IMAGE_TAG_PREVIEW }}
            type=registry,ref=${{ steps.vars.outputs.IMAGE_TAG_MAIN_LATEST }}
            type=registry,ref=${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest
          #
          # Publish layers to both the PR-specific image and the generic cache.
          # The PR image gives us super-fast incremental rebuilds during the
          # lifetime of the PR; the generic cache helps other branches, and
          # the next main build, pick up what was compiled here.
          #
          cache-to: |
            type=registry,ref=${{ steps.vars.outputs.IMAGE_TAG_PREVIEW }},mode=max
            type=registry,ref=${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest,mode=max

      - name: 🚢 Deploy PR app to Fly.io
        id: deploy
        uses: superfly/fly-pr-review-apps@1.5.0
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_APP_REVIEW }}
          FLY_REGION: ams
          FLY_ORG: personal
        with:
          config: ./packages/app/fly.review.yaml
          name: ${{ steps.vars.outputs.FLY_APP_NAME }}
          secrets: GITHUB_TOKEN=${{ secrets.OCTOKIT_RESUME_TOKEN }}
          image: ${{ steps.vars.outputs.IMAGE_TAG_PREVIEW }}

      - name: 🗑 Clean up old GHCR preview images for this PR
        id: clean_old_images
        if: success()
        continue-on-error: true      # Don’t fail the whole workflow if the tidy-up bombs
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}
          package-type: container
          package-name: ${{ steps.vars.outputs.PACKAGE_NAME_PREVIEW }}
          token: ${{ secrets.DELETE_DEPLOYMENT_PAT_TOKEN }}   # PAT with `delete:packages`
          #
          # ── Keep exactly the two “active” tags ───────────────────────────
          #  • pr-<PR>                   → the rolling tag updated on every push
          #  • pr-<PR>-<SHA>            → the specific image we have just built
          #    Everything else can go.
          #
          ignore-versions: '^pr-${{ steps.vars.outputs.PR_NUMBER }}$|^pr-${{ steps.vars.outputs.PR_NUMBER }}-${{ github.sha }}$'
          min-versions-to-keep: 2             # safety-net: never delete if only those two remain
          num-old-versions-to-delete: 30      # hard cap – avoid paging through hundreds of versions
          delete-only-untagged-versions: false

      - name: Update PR with deployment status
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = "${{ job.status }}";
            const url = "${{ steps.deploy.outputs.url }}";
            const emoji = result === "success" ? "✅" : "❌";

            let body = `${emoji} Preview deployment ${result.toLowerCase()}.\n\n`;

            if (result === "success") {
              body += `🌐 Preview URL: ${url}\n`;
              body += `\nThis preview environment will be automatically cleaned up when the PR is closed.`;
            } else {
              body += `Deployment failed. Please check the [workflow logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for more details.`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
