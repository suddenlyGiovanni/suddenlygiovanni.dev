name: üöÄ Deploy Preview
permissions:
  contents: read
  packages: write
  actions: read
  deployments: write
  statuses: write
  pull-requests: write
  issues: write
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to deploy'
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-pr-${{ github.event.number || github.event.inputs.pr_number }}
  cancel-in-progress: true


jobs:
  deploy_preview:
    name: Build and Deploy Preview to Fly.io
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
      status: ${{ job.status }}
    environment:
      name: fly-preview-${{ github.event.number || github.event.inputs.pr_number }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Add deployment pending comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîÑ Preview deployment started... Please wait while we deploy your changes!'
            })

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for flyctl release naming
          # If triggered manually, ensure we checkout the PR
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/pull/{0}/merge', github.event.inputs.pr_number) || '' }}

      - name: Prepare Repository Variables
        id: vars
        uses: ./.github/actions/prepare-repo-variables
        with:
          pr_number: ${{ github.event.inputs.pr_number || github.event.number }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if cache image exists
        id: check_cache
        continue-on-error: true
        shell: bash
        run: |
          # Check if the image exists using docker manifest inspect instead of pull
          echo "Checking if cache image exists: ${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest"
          if docker manifest inspect ${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest > /dev/null 2>&1; then
            echo "Cache image exists"
            echo "cache_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Cache image does not exist yet"
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: üê≥ Build and Push Docker Image for Preview (with cache)
        id: docker_build_push_with_cache
        if: steps.check_cache.outputs.cache_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/app/Dockerfile
          push: true # Push the image to the registry
          # 1) a rolling tag that is overwritten on every push
          # 2) an immutable tag with the full SHA for debugging/roll-back
          tags: |
            ${{ steps.vars.outputs.IMAGE_NAME_PREVIEW }}:pr-${{ github.event.number || github.event.inputs.pr_number }}
            ${{ steps.vars.outputs.IMAGE_NAME_PREVIEW }}:pr-${{ github.event.number || github.event.inputs.pr_number }}-${{ github.sha }}

          # Cache configuration (using registry)
          cache-from: type=registry,ref=${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest,mode=max

      - name: üê≥ Build and Push Docker Image for Preview (without cache)
        id: docker_build_push_without_cache
        if: steps.check_cache.outputs.cache_exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/app/Dockerfile
          push: true # Push the image to the registry
          # 1) a rolling tag that is overwritten on every push
          # 2) an immutable tag with the full SHA for debugging/roll-back
          tags: |
            ${{ steps.vars.outputs.IMAGE_NAME_PREVIEW }}:pr-${{ github.event.number || github.event.inputs.pr_number }}
            ${{ steps.vars.outputs.IMAGE_NAME_PREVIEW }}:pr-${{ github.event.number || github.event.inputs.pr_number }}-${{ github.sha }}

          # Only create cache, don't try to use it
          cache-to: type=registry,ref=${{ steps.vars.outputs.CACHE_IMAGE_NAME }}:latest,mode=max


      - name: üö¢ Deploy PR app to Fly.io
        id: deploy
        uses: superfly/fly-pr-review-apps@1.5.0
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_APP_REVIEW }}
          FLY_REGION: ams
          FLY_ORG: personal
        with:
          config: ./packages/app/fly.review.yaml
          name: ${{ steps.vars.outputs.FLY_APP_NAME }}
          secrets: GITHUB_TOKEN=${{ secrets.OCTOKIT_RESUME_TOKEN }}
          image: ${{ steps.vars.outputs.IMAGE_NAME_PREVIEW }}:pr-${{ github.event.number || github.event.inputs.pr_number }}



      - name: üóë Clean up old GHCR preview images for this PR
        id: clean_old_images
        if: success()
        continue-on-error: true # Prevent workflow failure if cleanup fails
        uses: actions/delete-package-versions@v5
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ steps.vars.outputs.PACKAGE_NAME_PREVIEW }}
          package-type: 'container'
          min-versions-to-keep: 2
          token: ${{ secrets.DELETE_DEPLOYMENT_PAT_TOKEN }}   # PAT with delete:packages
          # Only keep the current build image, delete older ones for this PR
          ignore-versions: "^(?!pr-${{ github.event.number || github.event.inputs.pr_number }}-${{ github.sha }}$).*$"
          num-old-versions-to-delete: 5
          # Set additional parameters to simplify the operation
          delete-only-untagged-versions: false

      - name: Verify image cleanup
        if: always()
        run: |
          echo "Verifying package cleanup for: ${{ steps.vars.outputs.PACKAGE_NAME_PREVIEW }}"

          # List packages to verify existence
          echo "Available packages:"
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages?package_type=container" | jq '.[].name' || echo "No packages found or error"

          # Attempt to get versions using correct endpoint
          echo "Checking versions for this package:"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ steps.vars.outputs.PACKAGE_NAME_PREVIEW }}/versions")

          # Check if we have actual content or an error
          if echo "$RESPONSE" | jq -e 'has("message")' > /dev/null; then
            echo "Error from GitHub API: $(echo "$RESPONSE" | jq -r '.message')"
          else
            echo "Available versions:"
            echo "$RESPONSE" | jq '.[].metadata.container.tags[]' || echo "No versions found or format different than expected"

            # Count remaining versions for this PR
            PR_TAG_PREFIX="pr-${{ github.event.number || github.event.inputs.pr_number }}-"
            REMAINING_VERSIONS=$(echo "$RESPONSE" | jq --arg prefix "$PR_TAG_PREFIX" '[.[].metadata.container.tags[] | select(startswith($prefix))] | length' || echo "0")
            echo "Remaining versions for this PR: $REMAINING_VERSIONS"
          fi

      - name: Update PR with deployment status
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = "${{ job.status }}";
            const url = "${{ steps.deploy.outputs.url }}";
            const emoji = result === "success" ? "‚úÖ" : "‚ùå";

            let body = `${emoji} Preview deployment ${result.toLowerCase()}.\n\n`;

            if (result === "success") {
              body += `üåê Preview URL: ${url}\n`;
              body += `\nThis preview environment will be automatically cleaned up when the PR is closed.`;
            } else {
              body += `Deployment failed. Please check the [workflow logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for more details.`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
