name: 'Prepare Repository Variables'
description: 'Prepares common repository variables for workflows'
inputs:
  pr_number:
    description: 'PR number for preview environments (required for workflow_dispatch)'
    required: false
outputs:
  PACKAGE_NAME_MAIN:
    description: 'Main package name (e.g., suddenlygiovanni.dev)'
    value: ${{ steps.set-vars.outputs.PACKAGE_NAME_MAIN }}
  IMAGE_NAME_MAIN:
    description: 'Main image name (e.g., ghcr.io/suddenlygiovanni/suddenlygiovanni.dev)'
    value: ${{ steps.set-vars.outputs.IMAGE_NAME_MAIN }}
  PACKAGE_NAME_PREVIEW:
    description: 'Preview package name (e.g., suddenlygiovanni.dev-preview)'
    value: ${{ steps.set-vars.outputs.PACKAGE_NAME_PREVIEW }}
  IMAGE_NAME_PREVIEW:
    description: 'Preview image name (e.g., ghcr.io/suddenlygiovanni/suddenlygiovanni.dev-preview)'
    value: ${{ steps.set-vars.outputs.IMAGE_NAME_PREVIEW }}
  PACKAGE_NAME_CACHE:
    description: 'Cache package name (e.g., suddenlygiovanni.dev-cache)'
    value: ${{ steps.set-vars.outputs.PACKAGE_NAME_CACHE }}
  CACHE_IMAGE_NAME:
    description: 'Cache image name (e.g., ghcr.io/suddenlygiovanni/suddenlygiovanni.dev-cache)'
    value: ${{ steps.set-vars.outputs.CACHE_IMAGE_NAME }}
  FLY_APP_NAME:
    description: 'Fly app name for preview environments'
    value: ${{ steps.set-vars.outputs.FLY_APP_NAME }}

runs:
  using: "composite"
  steps:
    - id: set-vars
      shell: bash
      env:
        EVENT_PR_NUMBER: ${{ github.event.number }}
        INPUT_PR_NUMBER: ${{ inputs.pr_number }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        # Validate repository format
        if [[ ! "${GITHUB_REPOSITORY}" =~ ^[^/]+/[^/]+$ ]]; then
          echo "::error::Invalid repository format: ${GITHUB_REPOSITORY}"
          exit 1
        fi
        
        # Process repository name
        repo_full_lowercase=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
        repo_name_only=$(echo "${repo_full_lowercase}" | cut -d '/' -f 2)
        
        # Basic sanitization of repo name - replace special chars with dashes
        repo_name_only=$(echo "${repo_name_only}" | tr -c '[:alnum:]-' '-')
        
        # Determine PR number from event or input with validation
        if [ -n "${EVENT_PR_NUMBER}" ]; then
          PR_NUMBER="${EVENT_PR_NUMBER}"
        else
          PR_NUMBER="${INPUT_PR_NUMBER}"
        fi
        
        # Validate PR number is present and numeric
        if [ -z "${PR_NUMBER}" ]; then
          echo "::error::PR number is required but not provided"
          exit 1
        fi
        
        if ! [[ "${PR_NUMBER}" =~ ^[0-9]+$ ]]; then
          echo "::warning::PR number is not numeric: '${PR_NUMBER}'. This may cause issues."
        fi
        
        echo "Using PR number: ${PR_NUMBER}"
        
        # Construct resource names
        PACKAGE_NAME_MAIN="${repo_name_only}"
        IMAGE_NAME_MAIN="ghcr.io/${repo_full_lowercase}"
        
        PACKAGE_NAME_PREVIEW="${repo_name_only}-preview"
        IMAGE_NAME_PREVIEW="ghcr.io/${repo_full_lowercase}/${repo_name_only}-preview"
        
        PACKAGE_NAME_CACHE="${repo_name_only}-cache"
        CACHE_IMAGE_NAME="ghcr.io/${repo_full_lowercase}/${repo_name_only}-cache"
        
        # Set Fly.io app name
        FLY_APP_NAME="suddenlygiovanni-dev-${PR_NUMBER}"
        
        # Set outputs for all variables with proper quoting to handle special characters
        echo "PACKAGE_NAME_MAIN=${PACKAGE_NAME_MAIN}" >> $GITHUB_OUTPUT
        echo "IMAGE_NAME_MAIN=${IMAGE_NAME_MAIN}" >> $GITHUB_OUTPUT
        
        echo "PACKAGE_NAME_PREVIEW=${PACKAGE_NAME_PREVIEW}" >> $GITHUB_OUTPUT
        echo "IMAGE_NAME_PREVIEW=${IMAGE_NAME_PREVIEW}" >> $GITHUB_OUTPUT
        
        echo "PACKAGE_NAME_CACHE=${PACKAGE_NAME_CACHE}" >> $GITHUB_OUTPUT
        echo "CACHE_IMAGE_NAME=${CACHE_IMAGE_NAME}" >> $GITHUB_OUTPUT
        
        echo "FLY_APP_NAME=${FLY_APP_NAME}" >> $GITHUB_OUTPUT
