; ___Dependency Hoisting Settings___

; When true, all dependencies are hoisted to node_modules/.pnpm/node_modules.
; This makes unlisted dependencies accessible to all packages inside node_modules.
; v8 default to `true`
hoist = ture

; When true, packages from the workspaces are symlinked to
; `<workspace_root>/node_modules/.pnpm/node_modules` or to
; `<workspace_root>/node_modules` depending on other hoisting settings.
; This in v9 get set to `ture` by default. prev state was `false`.
hoist-workspace-packages = true

; pnpm creates a semistrict node_modules, meaning dependencies have access to
; undeclared dependencies but modules outside of node_modules do not.
; default to `false`
shamefully-hoist = false

; ___Node-Modules Settings___

modules-dir = node_modules

; `isolated` - dependencies are symlinked from a virtual store at node_modules/.pnpm.
; default to `isolated`
node-linker = isolated

; When symlink is set to false, pnpm creates a virtual store directory without
; any symlinks. It is a useful setting together with `node-linker=pnp`.
; default to `true`
symlink = true

; When false, pnpm will not write any files to the modules directory (node_modules).
; default to `true`
enable-modules-dir = true
`
; The directory with links to the store. All direct and indirect dependencies of
; the project are linked into this directory.
; Or you can set the virtual store to .pnpm and add it to .gitignore. This will
; make stacktraces cleaner as paths to dependencies will be one directory higher.
; default to `node_modules/.pnpm`
virtual-store-dir = .pnpm

; default to `auto`
package-import-method = auto

; ___Lockfile Settings___

; default to `true`
lockfile = true

; When set to true and the available pnpm-lock.yaml satisfies the package.json
; dependencies directive, a headless installation is performed. A headless
; installation skips all dependency resolution as it does not need to modify the
;	lockfile.
; default to `true`
prefer-frozen-lockfile = true

; Add the full URL to the package's tarball to every entry in pnpm-lock.yaml.
; default to `false`
lockfile-include-tarball-url = false

; ___Peer Dependency Settings__

; When true, any missing non-optional peer dependencies are automatically installed.
; default to `true`
auto-install-peers = true

; When this setting is set to true, packages with peer dependencies will be
; deduplicated after peers resolution.
; this in v9 get set to `true` by default. prev state was `false`
dedupe-peer-dependents = true

; If this is enabled, commands will fail if there is a missing or invalid peer
; dependency in the tree.
; default to `false`
strict-peer-dependencies = true

; When enabled, dependencies of the root workspace project are used to resolve
; peer dependencies of any projects in the workspace. It is a useful feature as
; you can install your peer dependencies only in the root of the workspace, and
; you can be sure that all projects in the workspace use the same versions of
; the peer dependencies.
; default to `true`
resolve-peers-from-workspace-root = true

; ___CLI Settings___

; default to `false`
use-beta-cli = true

; If this is enabled, the primary behaviour of pnpm install becomes that of
; `pnpm install -r`, meaning the install is performed on all workspace or
; subdirectory packages.
; default to `true`
recursive-install = true

; If this is enabled, pnpm will not install any package that claims to not be
; compatible with the current Node version.
; default to `false`
engine-strict = true


; ___Workspace Settings___

; If this is enabled, locally available packages are linked to node_modules
; instead of being downloaded from the registry. This is very convenient in a
; monorepo. If you need local packages to also be linked to subdependencies, you
; can use the deep setting.
; this in v9 get set to `false` by default. prev state was `true`
link-workspace-packages = false


; If this is enabled, local packages from the workspace are preferred over
; packages from the registry, even if there is a newer version of the package in
; the registry.
; default to `false`
prefer-workspace-packages = false

; If this is enabled, pnpm creates a single pnpm-lock.yaml file in the root of
; the workspace.
; default to `true`
shared-workspace-lockfile = true

; This setting controls how dependencies that are linked from the workspace are
; added to package.json.
; default to `rolling`
save-workspace-protocol = rolling

; When executing commands recursively in a workspace, execute them on the root
; workspace project as well.
; default to `false`
include-workspace-root = false


; When set to true, no workspace cycle warnings will be printed.
; default to `false`
ignore-workspace-cycles = false

; When set to true, installation will fail if the workspace has cycles.
; default to `false`
disallow-workspace-cycles = true


; ___Other Settings___

save-prefix = ''

tag = latest

; When this setting is enabled, dependencies that are injected will be symlinked
; from the workspace whenever possible. If the dependent project and the injected
; dependency reference the same peer dependencies, then it is not necessary to
; physically copy the injected dependency into the dependent's node_modules;
; a symlink is sufficient.
; default to `true`
dedupe-injected-deps = true

; this in v9 get set to `true` by default. prev state was `false`
enable-pre-post-scripts = false

; ___Registry & Authentication Settings___

@jsr:registry=https://npm.jsr.io
